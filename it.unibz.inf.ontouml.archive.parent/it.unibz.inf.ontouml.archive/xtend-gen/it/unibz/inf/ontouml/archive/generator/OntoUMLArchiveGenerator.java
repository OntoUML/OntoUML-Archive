/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.ontouml.archive.generator;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import it.unibz.inf.ontouml.archive.OntoUMLArchiveUtils;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.AggregationKind;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.BinaryAssociation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Generalization;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Model;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.ModelElement;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class OntoUMLArchiveGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private OntoUMLArchiveUtils _ontoUMLArchiveUtils;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String modelName = "full_model.txt";
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _get = resource.getContents().get(0);
      Set<ModelElement> _modelElements = this._ontoUMLArchiveUtils.getModelElements(((Model) _get));
      for(final ModelElement e : _modelElements) {
        _builder.newLineIfNotEmpty();
        String _plantUML = this.toPlantUML(e);
        _builder.append(_plantUML);
        _builder.newLineIfNotEmpty();
      }
    }
    String _plus = ("@startuml\n\n" + _builder);
    String _plus_1 = (_plus + "\n@enduml");
    fsa.generateFile(modelName, _plus_1);
  }
  
  public String toPlantUML(final ModelElement e) {
    boolean _matched = false;
    if ((e instanceof it.unibz.inf.ontouml.archive.ontoUMLArchive.Class)) {
      _matched=true;
      return this.classToPlantUML(((it.unibz.inf.ontouml.archive.ontoUMLArchive.Class) e));
    }
    if (!_matched) {
      if ((e instanceof Generalization)) {
        _matched=true;
        return this.generalizationToPlantUML(((Generalization) e));
      }
    }
    if (!_matched) {
      if ((e instanceof BinaryAssociation)) {
        _matched=true;
        return this.binaryAssociationToPlantUML(((BinaryAssociation) e));
      }
    }
    return null;
  }
  
  public String classToPlantUML(final it.unibz.inf.ontouml.archive.ontoUMLArchive.Class c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isIsAbstract = c.isIsAbstract();
      if (_isIsAbstract) {
        _builder.append("abstract ");
      }
    }
    String _replaceAll = c.getName().replaceAll(" ", "_");
    _builder.append(_replaceAll);
    _builder.append(" ");
    {
      EList<String> _stereotypes = c.getStereotypes();
      for(final String str : _stereotypes) {
        _builder.append("<<");
        _builder.append(str);
        _builder.append(">>");
      }
    }
    return _builder.toString();
  }
  
  public String generalizationToPlantUML(final Generalization g) {
    StringConcatenation _builder = new StringConcatenation();
    String _replaceAll = g.getSuper().getName().replaceAll(" ", "_");
    _builder.append(_replaceAll);
    _builder.append(" <|-- ");
    String _replaceAll_1 = g.getSub().getName().replaceAll(" ", "_");
    _builder.append(_replaceAll_1);
    return _builder.toString();
  }
  
  public String binaryAssociationToPlantUML(final BinaryAssociation a) {
    final StringBuilder str = new StringBuilder();
    str.append(a.getFrom().getEndType().getName().replaceAll(" ", "_"));
    AggregationKind _aggregationKind = a.getFrom().getAggregationKind();
    boolean _equals = Objects.equal(_aggregationKind, AggregationKind.COMPOSITE);
    if (_equals) {
      str.append(" *-");
    } else {
      AggregationKind _aggregationKind_1 = a.getFrom().getAggregationKind();
      boolean _equals_1 = Objects.equal(_aggregationKind_1, AggregationKind.SHARED);
      if (_equals_1) {
        str.append(" o-");
      } else {
        str.append(" -");
      }
    }
    AggregationKind _aggregationKind_2 = a.getTo().getAggregationKind();
    boolean _equals_2 = Objects.equal(_aggregationKind_2, AggregationKind.COMPOSITE);
    if (_equals_2) {
      str.append("-* ");
    } else {
      AggregationKind _aggregationKind_3 = a.getTo().getAggregationKind();
      boolean _equals_3 = Objects.equal(_aggregationKind_3, AggregationKind.SHARED);
      if (_equals_3) {
        str.append("-o ");
      } else {
        str.append("- ");
      }
    }
    str.append(a.getTo().getEndType().getName().replaceAll(" ", "_"));
    if ((((a.getName() != null) && (!a.getName().isEmpty())) && (!Objects.equal(a.getName(), "unnamed")))) {
      String _name = a.getName();
      String _plus = (": " + _name);
      String _plus_1 = (_plus + " >");
      str.append(_plus_1);
    }
    return str.toString();
  }
}
