/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.ontouml.archive.ontoUMLArchive.impl;

import it.unibz.inf.ontouml.archive.ontoUMLArchive.AggregationKind;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Association;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.AssociationEnd;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Attribute;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.BinaryAssociation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.ClassDerivationEnd;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.DependencyLink;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Derivation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.DirectedAssociation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Generalization;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.GeneralizationSet;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Model;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.ModelElement;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Multiplicity;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.NaryAssociation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.OntoUMLArchiveFactory;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.OntoUMLArchivePackage;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.RelationDerivationEnd;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Relationship;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.UndirectedAssociation;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OntoUMLArchiveFactoryImpl extends EFactoryImpl implements OntoUMLArchiveFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OntoUMLArchiveFactory init()
  {
    try
    {
      OntoUMLArchiveFactory theOntoUMLArchiveFactory = (OntoUMLArchiveFactory)EPackage.Registry.INSTANCE.getEFactory(OntoUMLArchivePackage.eNS_URI);
      if (theOntoUMLArchiveFactory != null)
      {
        return theOntoUMLArchiveFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OntoUMLArchiveFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OntoUMLArchiveFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OntoUMLArchivePackage.MODEL: return createModel();
      case OntoUMLArchivePackage.MODEL_ELEMENT: return createModelElement();
      case OntoUMLArchivePackage.CLASS: return createClass();
      case OntoUMLArchivePackage.ATTRIBUTE: return createAttribute();
      case OntoUMLArchivePackage.RELATIONSHIP: return createRelationship();
      case OntoUMLArchivePackage.ASSOCIATION: return createAssociation();
      case OntoUMLArchivePackage.BINARY_ASSOCIATION: return createBinaryAssociation();
      case OntoUMLArchivePackage.DIRECTED_ASSOCIATION: return createDirectedAssociation();
      case OntoUMLArchivePackage.UNDIRECTED_ASSOCIATION: return createUndirectedAssociation();
      case OntoUMLArchivePackage.NARY_ASSOCIATION: return createNaryAssociation();
      case OntoUMLArchivePackage.ASSOCIATION_END: return createAssociationEnd();
      case OntoUMLArchivePackage.MULTIPLICITY: return createMultiplicity();
      case OntoUMLArchivePackage.GENERALIZATION: return createGeneralization();
      case OntoUMLArchivePackage.DEPENDENCY_LINK: return createDependencyLink();
      case OntoUMLArchivePackage.DERIVATION: return createDerivation();
      case OntoUMLArchivePackage.CLASS_DERIVATION_END: return createClassDerivationEnd();
      case OntoUMLArchivePackage.RELATION_DERIVATION_END: return createRelationDerivationEnd();
      case OntoUMLArchivePackage.GENERALIZATION_SET: return createGeneralizationSet();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OntoUMLArchivePackage.AGGREGATION_KIND:
        return createAggregationKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OntoUMLArchivePackage.AGGREGATION_KIND:
        return convertAggregationKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelElement createModelElement()
  {
    ModelElementImpl modelElement = new ModelElementImpl();
    return modelElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public it.unibz.inf.ontouml.archive.ontoUMLArchive.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Association createAssociation()
  {
    AssociationImpl association = new AssociationImpl();
    return association;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryAssociation createBinaryAssociation()
  {
    BinaryAssociationImpl binaryAssociation = new BinaryAssociationImpl();
    return binaryAssociation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DirectedAssociation createDirectedAssociation()
  {
    DirectedAssociationImpl directedAssociation = new DirectedAssociationImpl();
    return directedAssociation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UndirectedAssociation createUndirectedAssociation()
  {
    UndirectedAssociationImpl undirectedAssociation = new UndirectedAssociationImpl();
    return undirectedAssociation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NaryAssociation createNaryAssociation()
  {
    NaryAssociationImpl naryAssociation = new NaryAssociationImpl();
    return naryAssociation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssociationEnd createAssociationEnd()
  {
    AssociationEndImpl associationEnd = new AssociationEndImpl();
    return associationEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity createMultiplicity()
  {
    MultiplicityImpl multiplicity = new MultiplicityImpl();
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Generalization createGeneralization()
  {
    GeneralizationImpl generalization = new GeneralizationImpl();
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DependencyLink createDependencyLink()
  {
    DependencyLinkImpl dependencyLink = new DependencyLinkImpl();
    return dependencyLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Derivation createDerivation()
  {
    DerivationImpl derivation = new DerivationImpl();
    return derivation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDerivationEnd createClassDerivationEnd()
  {
    ClassDerivationEndImpl classDerivationEnd = new ClassDerivationEndImpl();
    return classDerivationEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationDerivationEnd createRelationDerivationEnd()
  {
    RelationDerivationEndImpl relationDerivationEnd = new RelationDerivationEndImpl();
    return relationDerivationEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GeneralizationSet createGeneralizationSet()
  {
    GeneralizationSetImpl generalizationSet = new GeneralizationSetImpl();
    return generalizationSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AggregationKind createAggregationKindFromString(EDataType eDataType, String initialValue)
  {
    AggregationKind result = AggregationKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAggregationKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OntoUMLArchivePackage getOntoUMLArchivePackage()
  {
    return (OntoUMLArchivePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OntoUMLArchivePackage getPackage()
  {
    return OntoUMLArchivePackage.eINSTANCE;
  }

} //OntoUMLArchiveFactoryImpl
