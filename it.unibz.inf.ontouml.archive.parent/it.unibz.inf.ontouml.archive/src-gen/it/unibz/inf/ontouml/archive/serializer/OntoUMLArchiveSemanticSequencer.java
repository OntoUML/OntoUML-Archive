/*
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.ontouml.archive.serializer;

import com.google.inject.Inject;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.AssociationEnd;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Attribute;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.ClassDerivationEnd;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.DependencyLink;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Derivation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.DirectedAssociation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Generalization;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.GeneralizationSet;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Model;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Multiplicity;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.NaryAssociation;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.OntoUMLArchivePackage;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.RelationDerivationEnd;
import it.unibz.inf.ontouml.archive.ontoUMLArchive.UndirectedAssociation;
import it.unibz.inf.ontouml.archive.services.OntoUMLArchiveGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class OntoUMLArchiveSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OntoUMLArchiveGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OntoUMLArchivePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OntoUMLArchivePackage.ASSOCIATION_END:
				sequence_AssociationEnd(context, (AssociationEnd) semanticObject); 
				return; 
			case OntoUMLArchivePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case OntoUMLArchivePackage.CLASS:
				sequence_Class(context, (it.unibz.inf.ontouml.archive.ontoUMLArchive.Class) semanticObject); 
				return; 
			case OntoUMLArchivePackage.CLASS_DERIVATION_END:
				sequence_ClassDerivationEnd(context, (ClassDerivationEnd) semanticObject); 
				return; 
			case OntoUMLArchivePackage.DEPENDENCY_LINK:
				sequence_DependencyLink(context, (DependencyLink) semanticObject); 
				return; 
			case OntoUMLArchivePackage.DERIVATION:
				sequence_Derivation(context, (Derivation) semanticObject); 
				return; 
			case OntoUMLArchivePackage.DIRECTED_ASSOCIATION:
				sequence_DirectedAssociation(context, (DirectedAssociation) semanticObject); 
				return; 
			case OntoUMLArchivePackage.GENERALIZATION:
				sequence_Generalization(context, (Generalization) semanticObject); 
				return; 
			case OntoUMLArchivePackage.GENERALIZATION_SET:
				sequence_GeneralizationSet(context, (GeneralizationSet) semanticObject); 
				return; 
			case OntoUMLArchivePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case OntoUMLArchivePackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case OntoUMLArchivePackage.NARY_ASSOCIATION:
				sequence_NaryAssociation(context, (NaryAssociation) semanticObject); 
				return; 
			case OntoUMLArchivePackage.RELATION_DERIVATION_END:
				sequence_RelationDerivationEnd(context, (RelationDerivationEnd) semanticObject); 
				return; 
			case OntoUMLArchivePackage.UNDIRECTED_ASSOCIATION:
				sequence_UndirectedAssociation(context, (UndirectedAssociation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AssociationEnd returns AssociationEnd
	 *
	 * Constraint:
	 *     (
	 *         (aggregationKind=AggregationKindDeclaration | navigability=NavigabilityDeclaration)* 
	 *         name=StringOrID? 
	 *         multiplicity=Multiplicity? 
	 *         endType=[Class|StringOrID] 
	 *         (constraints+=STRING constraints+=STRING*)?
	 *     )
	 */
	protected void sequence_AssociationEnd(ISerializationContext context, AssociationEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=StringOrID (multiplicity=Multiplicity? attType=[Class|StringOrID])?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassDerivationEnd returns ClassDerivationEnd
	 *
	 * Constraint:
	 *     (multiplicity=Multiplicity? endType=[Class|StringOrID] (constraints+=STRING constraints+=STRING*)?)
	 */
	protected void sequence_ClassDerivationEnd(ISerializationContext context, ClassDerivationEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (isAbstract?='abstract'? name=StringOrID stereotypes+=STEREOTYPE_STRING* attributes+=Attribute*)
	 */
	protected void sequence_Class(ISerializationContext context, it.unibz.inf.ontouml.archive.ontoUMLArchive.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns DependencyLink
	 *     Relationship returns DependencyLink
	 *     DependencyLink returns DependencyLink
	 *
	 * Constraint:
	 *     (name=STRING? stereotypes+=STEREOTYPE_STRING* from=[Class|StringOrID] to=[Class|StringOrID])
	 */
	protected void sequence_DependencyLink(ISerializationContext context, DependencyLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Derivation
	 *     Relationship returns Derivation
	 *     Derivation returns Derivation
	 *
	 * Constraint:
	 *     (name=StringOrID? stereotypes+=STEREOTYPE_STRING* class=ClassDerivationEnd part=RelationDerivationEnd)
	 */
	protected void sequence_Derivation(ISerializationContext context, Derivation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns DirectedAssociation
	 *     Relationship returns DirectedAssociation
	 *     Association returns DirectedAssociation
	 *     BinaryAssociation returns DirectedAssociation
	 *     DirectedAssociation returns DirectedAssociation
	 *
	 * Constraint:
	 *     (name=StringOrID? stereotypes+=STEREOTYPE_STRING* from=AssociationEnd to=AssociationEnd)
	 */
	protected void sequence_DirectedAssociation(ISerializationContext context, DirectedAssociation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns GeneralizationSet
	 *     GeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     ((isDisjoint?='disjoint' | isComplete?='complete')* name=StringOrID? generalizations+=Generalization+)
	 */
	protected void sequence_GeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Generalization
	 *     Relationship returns Generalization
	 *     Generalization returns Generalization
	 *
	 * Constraint:
	 *     (name=STRING? super=[Class|StringOrID] sub=[Class|StringOrID])
	 */
	protected void sequence_Generalization(ISerializationContext context, Generalization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         (publicationTitle=STRING? authors=STRING ontologyName=STRING elements+=ModelElement*) | 
	 *         (publicationTitle=STRING? (ontologyName=STRING | (ontologyName=STRING elements+=ModelElement*))) | 
	 *         ontologyName=STRING | 
	 *         (ontologyName=STRING elements+=ModelElement*)
	 *     )?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplicity returns Multiplicity
	 *
	 * Constraint:
	 *     (lower=CARDINALITY upper=CARDINALITY)
	 */
	protected void sequence_Multiplicity(ISerializationContext context, Multiplicity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntoUMLArchivePackage.Literals.MULTIPLICITY__LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntoUMLArchivePackage.Literals.MULTIPLICITY__LOWER));
			if (transientValues.isValueTransient(semanticObject, OntoUMLArchivePackage.Literals.MULTIPLICITY__UPPER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntoUMLArchivePackage.Literals.MULTIPLICITY__UPPER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicityAccess().getLowerCARDINALITYParserRuleCall_1_0(), semanticObject.getLower());
		feeder.accept(grammarAccess.getMultiplicityAccess().getUpperCARDINALITYParserRuleCall_3_0(), semanticObject.getUpper());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns NaryAssociation
	 *     Relationship returns NaryAssociation
	 *     Association returns NaryAssociation
	 *     NaryAssociation returns NaryAssociation
	 *
	 * Constraint:
	 *     (name=StringOrID? stereotypes+=STEREOTYPE_STRING* ends+=AssociationEnd ends+=AssociationEnd ends+=AssociationEnd+)
	 */
	protected void sequence_NaryAssociation(ISerializationContext context, NaryAssociation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationDerivationEnd returns RelationDerivationEnd
	 *
	 * Constraint:
	 *     (multiplicity=Multiplicity? endType=[Association|StringOrID] (constraints+=STRING constraints+=STRING*)?)
	 */
	protected void sequence_RelationDerivationEnd(ISerializationContext context, RelationDerivationEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns UndirectedAssociation
	 *     Relationship returns UndirectedAssociation
	 *     Association returns UndirectedAssociation
	 *     BinaryAssociation returns UndirectedAssociation
	 *     UndirectedAssociation returns UndirectedAssociation
	 *
	 * Constraint:
	 *     (name=StringOrID? stereotypes+=STEREOTYPE_STRING* endA=AssociationEnd endB=AssociationEnd)
	 */
	protected void sequence_UndirectedAssociation(ISerializationContext context, UndirectedAssociation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
