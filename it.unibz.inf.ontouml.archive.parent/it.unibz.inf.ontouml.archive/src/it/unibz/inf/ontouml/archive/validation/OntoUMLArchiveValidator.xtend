/*
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.ontouml.archive.validation

import org.eclipse.xtext.validation.Check
import it.unibz.inf.ontouml.archive.ontoUMLArchive.ModelElement
import it.unibz.inf.ontouml.archive.OntoUMLArchiveUtils
import com.google.inject.Inject
import org.eclipse.xtext.validation.CheckType
import it.unibz.inf.ontouml.archive.ontoUMLArchive.OntoUMLArchivePackage
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Class
import it.unibz.inf.ontouml.archive.ontoUMLArchive.Generalization
import it.unibz.inf.ontouml.archive.ontoUMLArchive.BinaryAssociation

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class OntoUMLArchiveValidator extends AbstractOntoUMLArchiveValidator {
	
	@Inject extension OntoUMLArchiveUtils
	
	public static val DUPLICATED_NAME = "it.unibz.inf.ontouml.archive.validation.DUPLICATED_NAME"
	public static val REFLEXIVE_GENERALIZATION = "it.unibz.inf.ontouml.archive.validation.REFLEXIVE_GENERALIZATION"
	public static val UNEXPECTED_STEREOTYPE = "it.unibz.inf.ontouml.archive.validation.UNEXPECTED_STEREOTYPE"
	public static val DUPLICATED_GENERALIZATION = "it.unibz.inf.ontouml.archive.validation.DUPLICATED_GENERALIZATION"
	
	@Check(CheckType.NORMAL)
	def checkNameDuplicatedName(ModelElement e) {
		if(!e.name.empty && e.containerModel.modelElements.exists[ it!=e && it.name==e.name ])
			error('''Model elements should not have duplicated names.''',
					e, OntoUMLArchivePackage.eINSTANCE.modelElement_Name,
					DUPLICATED_NAME)
	}
	
	@Check
	def checkGeneralizationEnds(Generalization g) {
		if(g.super == g.sub)
			error('''Generalizations are not reflexive.''', g, 
					OntoUMLArchivePackage.eINSTANCE.generalization_Super, 
					REFLEXIVE_GENERALIZATION)
	}
	
	@Check
	def checkUnexpectedClassStereotypes(Class c) {
		for (str : c.stereotypes) {
			if(!OntoUMLArchiveUtils.expectedClassStereotypes.contains(str))
				warning('''Unexpected class stereotype''', c,
						OntoUMLArchivePackage.eINSTANCE.class_Stereotypes, 
						c.stereotypes.indexOf(str), UNEXPECTED_STEREOTYPE)
		}
	}
	
	@Check
	def checkUnexpectedBinaryAssociationStereotypes(BinaryAssociation a) {
		for (str : a.stereotypes) {
			if(!OntoUMLArchiveUtils.expectedBinaryAssociationStereotypes.contains(str))
				warning('''Unexpected class stereotype''', a,
						OntoUMLArchivePackage.eINSTANCE.association_Stereotypes, 
						a.stereotypes.indexOf(str), UNEXPECTED_STEREOTYPE)
		}
	}
	
	@Check(CheckType.NORMAL)
	def checkDuplicatedGeneralizations(Generalization g) {
		val g2 = g.containerModel.modelElements.findFirst[ 
				if(it!==g && it instanceof Generalization)
					(it as Generalization).getSuper==g.getSuper && (it as Generalization).sub==g.sub
				else	 false  ]
		if(g2!==null)
			warning('''Duplicated generalization.''', g, 
					OntoUMLArchivePackage.eINSTANCE.modelElement_Name,
					DUPLICATED_GENERALIZATION)
	}
	
}
