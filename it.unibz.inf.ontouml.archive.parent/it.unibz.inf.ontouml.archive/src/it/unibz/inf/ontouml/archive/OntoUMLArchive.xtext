grammar it.unibz.inf.ontouml.archive.OntoUMLArchive with org.eclipse.xtext.common.Terminals

generate ontoUMLArchive "http://www.unibz.it/inf/ontouml/archive/OntoUMLArchive"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	elements+=ModelElement*
;
	
ModelElement:
	( Class | Relationship | GeneralizationSet ) ';'
;

Class:
	(isAbstract?='abstract')? 'class' name=STRING
	stereotypes+=STEREOTYPE_STRING*
	attributes+=Attribute*
;

Attribute:
	'att' name=STRING multiplicity=Multiplicity ':' attType=[Class|STRING]
;

Relationship:
	Association | Generalization | DependencyLink | Derivation
;

Association:
	BinaryAssociation | NaryAssociation
;

//BinaryAssociation:
//	RegularAssociation | ParthoodAssociation
//;

BinaryAssociation:
	'association' name=STRING?
	stereotypes+=STEREOTYPE_STRING*
	'from' from=AssociationEnd
	'to' to=AssociationEnd
;
//
//ParthoodAssociation:
//	'association' name=STRING?
//	stereotypes+=STEREOTYPE_STRING*
//	'whole' whole=AssociationEnd
//	'part' part=AssociationEnd
//;

NaryAssociation:
	'association' name=STRING?
	stereotypes+=STEREOTYPE_STRING*
	('end' ends+=AssociationEnd)
	('end' ends+=AssociationEnd)
	('end' ends+=AssociationEnd)+
;

AssociationEnd:
	aggregationKind=AggregationKindDeclaration?
	name=STRING?
	multiplicity=Multiplicity
	':' endType=[Class|STRING]
	//constraints+=CONSTRAINT_STRING*
	('{' constraints+=STRING (',' constraints+=STRING)* '}')?
;

enum AggregationKind:
	none | shared | composite
;

enum AggregationKindDeclaration returns AggregationKind:
	shared | composite
;

Multiplicity:
	'[' lower=CARDINALITY '..' upper=CARDINALITY ']'
;

CARDINALITY returns ecore::EInt:
	'*' | INT
;

Generalization:
	'gen' name=STRING?
	'super' super=[Class|STRING]
	'sub' sub=[Class|STRING]
;

DependencyLink:
	'dependency' name=STRING?
	stereotypes+=STEREOTYPE_STRING*
	'from' from=[Class|STRING]
	'to' to=[Class|STRING]
;

Derivation:
	'derivation' name=STRING?
	stereotypes+=STEREOTYPE_STRING*
	'class' class=ClassDerivationEnd
	'relation' part=RelationDerivationEnd
;

ClassDerivationEnd:
	multiplicity=Multiplicity
	endType=[Class|STRING]
//	constraints+=CONSTRAINT_STRING*
	('{' constraints+=STRING (',' constraints+=STRING)* '}')?
;

RelationDerivationEnd:
	multiplicity=Multiplicity
	endType=[Association|STRING]
//	constraints+=CONSTRAINT_STRING*
	('{' constraints+=STRING (',' constraints+=STRING)* '}')?
;


GeneralizationSet:
	'genset' (isDisjoint?='disjoint'? & isComplete?='complete'?) name=STRING?
	generalizations+=Generalization+
;

terminal STEREOTYPE_STRING returns ecore::EString:
	"<<" ('a'..'z'|'A'..'Z'|' ') ('a'..'z'|'A'..'Z'|' ')* ">>"
;

//terminal CONSTRAINT_STRING returns ecore::EString:
////	"{" ('a'..'z'|'A'..'Z'|' ') ('a'..'z'|'A'..'Z'|' '|'=')* "}"
//	'{' (!'}')* '}'
//;

//terminal CONSTRAINT_STRING returns ecore::EString:
//	"{" -> "}"
//;
//terminal fragment ESCAPED_CHAR:
//	'\\' ('n' | 't' | 'r' | '\\')
//;
//
//terminal CONSTRAINT_STRING returns ecore::EString:
////	'{' (ESCAPED_CHAR | !('\\' | '}'))* '}'
//	'{' (!'}')* '}'
//;

	