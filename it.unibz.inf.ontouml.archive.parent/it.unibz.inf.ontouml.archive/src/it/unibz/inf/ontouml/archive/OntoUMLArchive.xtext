grammar it.unibz.inf.ontouml.archive.OntoUMLArchive with org.eclipse.xtext.common.Terminals

generate ontoUMLArchive "http://www.unibz.it/inf/ontouml/archive/OntoUMLArchive"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	('publication' publicationTitle=STRING)?
	('authors' authors=STRING)?
	('ontology' ontologyName=STRING)?
	elements+=ModelElement*
;
	
ModelElement:
	( Class | Relationship | GeneralizationSet ) ';'
;

Class:
	(isAbstract?='abstract')? 'class' name=StringOrID
	stereotypes+=STEREOTYPE_STRING*
	attributes+=Attribute*
;

Attribute:
	'att' name=StringOrID (multiplicity=Multiplicity? ':' attType=[Class|StringOrID])?
;

Relationship:
	Association | Generalization | DependencyLink | Derivation
;

Association:
	BinaryAssociation | NaryAssociation
;

BinaryAssociation:
	DirectedAssociation | UndirectedAssociation
;

DirectedAssociation:
	'association' name=StringOrID?
	stereotypes+=STEREOTYPE_STRING*
	'from' from=AssociationEnd
	'to' to=AssociationEnd
;

UndirectedAssociation:
	'association' name=StringOrID?
	stereotypes+=STEREOTYPE_STRING*
	'end' endA=AssociationEnd
	'end' endB=AssociationEnd	
;

NaryAssociation:
	'association' name=StringOrID?
	stereotypes+=STEREOTYPE_STRING*
	('end' ends+=AssociationEnd)
	('end' ends+=AssociationEnd)
	('end' ends+=AssociationEnd)+
;

AssociationEnd:
	(aggregationKind=AggregationKindDeclaration? & navigability=NavigabilityDeclaration?)
	name=StringOrID?
	multiplicity=Multiplicity?
	':' endType=[Class|StringOrID]
	('{' constraints+=STRING (',' constraints+=STRING)* '}')?
;

enum AggregationKind:
	none | shared | composite
;

enum AggregationKindDeclaration returns AggregationKind:
	shared | composite
;

enum Navigability:
	unspecified | navigable | nonnavigable
;

enum NavigabilityDeclaration returns Navigability:
	navigable | nonnavigable
;

Multiplicity:
	'[' lower=CARDINALITY '..' upper=CARDINALITY ']'
;

CARDINALITY returns ecore::EInt:
	'*' | INT
;

Generalization:
	'gen' name=STRING?
	'super' super=[Class|StringOrID]
	'sub' sub=[Class|StringOrID]
;

DependencyLink:
	'dependency' name=STRING?
	stereotypes+=STEREOTYPE_STRING*
	'from' from=[Class|StringOrID]
	'to' to=[Class|StringOrID]
;

Derivation:
	'derivation' name=StringOrID?
	stereotypes+=STEREOTYPE_STRING*
	'class' class=ClassDerivationEnd
	'relation' part=RelationDerivationEnd
;

ClassDerivationEnd:
	multiplicity=Multiplicity?
	endType=[Class|StringOrID]
	('{' constraints+=STRING (',' constraints+=STRING)* '}')?
;

RelationDerivationEnd:
	multiplicity=Multiplicity?
	endType=[Association|StringOrID]
	('{' constraints+=STRING (',' constraints+=STRING)* '}')?
;


GeneralizationSet:
	'genset' (isDisjoint?='disjoint'? & isComplete?='complete'?) name=StringOrID?
	generalizations+=Generalization+
;

terminal STEREOTYPE_STRING returns ecore::EString:
	"<<" ('a'..'z'|'A'..'Z'|' ') ('a'..'z'|'A'..'Z'|' ')* ">>"
;

StringOrID returns ecore::EString:
	STRING | ID
;

